{"version":3,"sources":["assets/img/signup.svg","views/auth/register/Register.js"],"names":["module","exports","Yup","object","string","ref","initialValues","email","username","password","confirm_password","Register","props","dispatch","useDispatch","useState","setPassword","loading","setLoading","validationSchema","shape","required","min","when","is","val","length","then","oneOf","className","style","height","md","src","SignupImg","width","marginLeft","flex","onSubmit","values","AuthActions","register","user","location","state","type","res","window","href","catch","err","toast","error","filterErrorMsg","data","errors","position","POSITION","TOP_RIGHT","handleSubmit","handleChange","touched","id","name","onChange","value","e","target","xs","color","disabled","onClick","openLoginModal"],"mappings":"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","file":"static/js/6.2f56489e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/signup.82d5ddf5.svg\";","import React, { useState, useEffect } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { ToastContainer, toast } from \"react-toastify\"\r\nimport \"react-toastify/dist/ReactToastify.css\"\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CLink,\r\n  CCardGroup,\r\n  CCol,\r\n  CFormGroup,\r\n  CLabel,\r\n  CForm,\r\n  CInput,\r\n  CRow,\r\n} from \"@coreui/react\"\r\nimport CIcon from \"@coreui/icons-react\"\r\nimport { Formik } from \"formik\"\r\n\r\nimport CLoader from \"components/CLoader\"\r\nimport AuthActions from \"services/auth\"\r\nimport { filterErrorMsg } from \"utils/filter_factory\"\r\n\r\nimport object from \"yup/lib/object\"\r\nimport string from \"yup/lib/string\"\r\n\r\nimport \"./style.scss\"\r\n\r\nimport CLogo from 'components/CLogo'\r\n\r\nimport SignupImg from \"assets/img/signup.svg\"\r\n\r\nconst Yup = {\r\n  object,\r\n  string,\r\n  ref: () => {},\r\n}\r\n\r\nconst initialValues = {\r\n  email: \"\",\r\n  username: \"\",\r\n  password: \"\",\r\n  confirm_password: \"\",\r\n}\r\n\r\nconst Register = (props) => {\r\n  const dispatch = useDispatch()\r\n\r\n  //States\r\n  const [password, setPassword] = useState(\"\")\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  // Callbacks\r\n  const openModal = () => {\r\n    dispatch(AuthActions.openLoginModal())\r\n  }\r\n\r\n  const handleSubmit = (values) => {\r\n    setLoading(true)\r\n    dispatch(\r\n      AuthActions.register(\r\n        {\r\n          user: {\r\n            username: values.username,\r\n            email: values.email,\r\n            password: values.password,\r\n          },\r\n        },\r\n        props.location.state.type\r\n      )\r\n    )\r\n      .then((res) => {\r\n        setLoading(false)\r\n        window.location.href = \"/\"\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false)\r\n        toast.error(filterErrorMsg(err.data.errors), {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n        })\r\n      })\r\n  }\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n      .email(\"Please enter the valid email\")\r\n      .required(\"Email is required\"),\r\n    username: Yup.string()\r\n      .min(3, \"Username must be at least 3 characters long\")\r\n      .required(\"Username is required\"),\r\n    password: Yup.string()\r\n      .min(8, \"Password must be at least 8 characters long\")\r\n      .required(\"Password is required\"),\r\n    confirm_password: Yup.string()\r\n      .required(\"Confirm your password\")\r\n      .when(\"password\", {\r\n        is: (val) => val && val.length > 0,\r\n        then: Yup.string().oneOf([password], \"Both password need to be the same\"),\r\n      }),\r\n  })\r\n\r\n  return (\r\n    <div className=\"register-page flex-row align-items-center\">\r\n      <CRow className=\"justify-content-center w-100 m-0\" style={{ height: \"100vh\" }}>\r\n        <CCol md=\"12\" className=\"p-0\">\r\n          <CCardGroup className=\"h-100\">\r\n            <CCard className=\"text-white bg-primary py-5 d-md-down-none\">\r\n              <CCardBody className=\"text-center d-flex align-items-center p-0\">\r\n                <img src={SignupImg} width=\"115%\" style={{ marginLeft: \"-10%\" }} />\r\n              </CCardBody>\r\n            </CCard>\r\n            <CCard className=\"p-4\" style={{ flex: 2 }}>\r\n              <CCardBody className=\"pr-5\">\r\n                <Formik\r\n                  initialValues={initialValues}\r\n                  onSubmit={handleSubmit}\r\n                  validationSchema={validationSchema}\r\n                >\r\n                  {({ handleSubmit, handleChange, values, errors, touched }) => (\r\n                    <CForm onSubmit={handleSubmit}>\r\n                      <CLink href=\"/\">\r\n                        <CLogo width={125}/>\r\n                      </CLink>\r\n                      <h2 className=\"text-darl text-bold mt-4 text-capitalize\">\r\n                        {props.location.state.type} Sign Up\r\n                      </h2>\r\n                      <p className=\"text-caption\">\r\n                        Fitly isn’t an app. It’s a yoga class, it’s one-on-one\r\n                        personal training, it’s your motivation to reach your fitness\r\n                        goals. There’s no subscription, no gym and no need to feel\r\n                        self-conscious working out in front of others—just\r\n                        interactive training you can do at home.\r\n                      </p>\r\n                      <CFormGroup>\r\n                        <CLabel className=\"text-bold text-dark\">User Name</CLabel>\r\n                        <CInput\r\n                          type=\"text\"\r\n                          id=\"username\"\r\n                          name=\"username\"\r\n                          onChange={handleChange}\r\n                          value={values.username}\r\n                          className={\r\n                            touched.username\r\n                              ? errors.username\r\n                                ? \"is-invalid\"\r\n                                : \"is-valid\"\r\n                              : \"\"\r\n                          }\r\n                        />\r\n                        {errors.username && touched.username && (\r\n                          <div className=\"invalid-feedback\">{errors.username}</div>\r\n                        )}\r\n                      </CFormGroup>\r\n                      <CFormGroup>\r\n                        <CLabel className=\"text-bold text-dark\">Email</CLabel>\r\n                        <CInput\r\n                          type=\"text\"\r\n                          id=\"email\"\r\n                          name=\"email\"\r\n                          onChange={handleChange}\r\n                          value={values.email}\r\n                          className={\r\n                            touched.email\r\n                              ? errors.email\r\n                                ? \"is-invalid\"\r\n                                : \"is-valid\"\r\n                              : \"\"\r\n                          }\r\n                        />\r\n                        {errors.email && touched.email && (\r\n                          <div className=\"invalid-feedback\">{errors.email}</div>\r\n                        )}\r\n                      </CFormGroup>\r\n                      <CFormGroup>\r\n                        <CLabel className=\"text-bold text-dark\">Password</CLabel>\r\n                        <CInput\r\n                          type=\"password\"\r\n                          id=\"password\"\r\n                          name=\"password\"\r\n                          onChange={(e) => {\r\n                            handleChange(e)\r\n                            setPassword(e.target.value)\r\n                          }}\r\n                          value={values.password}\r\n                          className={\r\n                            touched.password\r\n                              ? errors.password\r\n                                ? \"is-invalid\"\r\n                                : \"is-valid\"\r\n                              : \"\"\r\n                          }\r\n                        />\r\n                        {errors.password && touched.password && (\r\n                          <div className=\"invalid-feedback\">{errors.password}</div>\r\n                        )}\r\n                      </CFormGroup>\r\n                      <CFormGroup>\r\n                        <CLabel className=\"text-bold text-dark\">\r\n                          Re-type Password\r\n                        </CLabel>\r\n                        <CInput\r\n                          type=\"password\"\r\n                          id=\"confirm_password\"\r\n                          name=\"confirm_password\"\r\n                          onChange={handleChange}\r\n                          value={values.confirm_password}\r\n                          className={\r\n                            touched.confirm_password\r\n                              ? errors.confirm_password\r\n                                ? \"is-invalid\"\r\n                                : \"is-valid\"\r\n                              : \"\"\r\n                          }\r\n                        />\r\n                        {errors.confirm_password && touched.confirm_password && (\r\n                          <div className=\"invalid-feedback\">\r\n                            {errors.confirm_password}\r\n                          </div>\r\n                        )}\r\n                      </CFormGroup>\r\n                      <CRow>\r\n                        <CCol xs=\"6\">\r\n                          <CButton\r\n                            color=\"primary\"\r\n                            type=\"submit\"\r\n                            className=\"px-4 btn-pill text-bold mt-4\"\r\n                            disabled={loading}\r\n                          >\r\n                            {loading ? <CLoader /> : \"SIGN UP\"}\r\n                          </CButton>\r\n                        </CCol>\r\n                      </CRow>\r\n                      <label className=\"text-bold mt-3 mb-3\">\r\n                        Already have an account?{\" \"}\r\n                      </label>\r\n                      <CRow>\r\n                        <CCol xs=\"6\">\r\n                          <CButton\r\n                            color=\"secondary\"\r\n                            className=\"btn-pill text-bold d-flex align-items-center justify-content-center\"\r\n                            onClick={() => {\r\n                              openModal()\r\n                            }}\r\n                          >\r\n                            <CIcon name=\"cuUserFill\" width=\"30\" height=\"30\" />{\" \"}\r\n                            <span className=\"ml-1\">SIGN IN</span>\r\n                          </CButton>\r\n                        </CCol>\r\n                      </CRow>\r\n                      <p className=\"text-dark mt-4\">\r\n                        This site is protected by reCaptcha and the{\" \"}\r\n                        <CLink className=\"text-decoration-underline\">\r\n                          Google Privacy Policy\r\n                        </CLink>{\" \"}\r\n                        and{\" \"}\r\n                        <CLink className=\"text-decoration-underline\">\r\n                          Terms of Service Apply\r\n                        </CLink>\r\n                      </p>\r\n                    </CForm>\r\n                  )}\r\n                </Formik>\r\n              </CCardBody>\r\n            </CCard>\r\n          </CCardGroup>\r\n        </CCol>\r\n      </CRow>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Register\r\n"],"sourceRoot":""}